# This script uses the excel file generated by contact.py for contact atom pairs as the input, and produces three excel
# files for salt bridges, hydrogen bonds and vdw contacts respectively. Usage:
#       python contactType.py -i infile -o outDir -a abbr
# Options:
# -i: Full path to the input pdb file, e.g., '/path/to/directory/????.xlsx'
# -o: Full path to the output directory
# -a: abbreviation for the structure studied

import os
import sys
import argparse
import pandas as pd
import numpy as np
import re
import contact


def parseArguments():
    # Create argument parser
    parser = argparse.ArgumentParser()

    # Positional mandatory arguments
    parser.add_argument("-i", help="Full path to the input excel file, '/path/to/directory/????.pdb'", type=str)
    parser.add_argument("-o", help="directory, '/path/to/directory/'", type=str)
    parser.add_argument("-a", help="The abbreviation for the structure studies", type=str)

    # Parse arguments
    args = parser.parse_args()

    return args


def saltBridge(df_in):  # Detect salt bridges (cutoff = 3.5 Å)
    saltBridgeList = []
    for i in range(len(df_in)):
        # Salt bridge case1: res1 is an acid reside ('D' or 'E') and  res2 is a basic residue ('K' or 'R')
        if ((df_in['Res1'].iloc[i][0] == 'D' and
             (df_in['Atom1'].iloc[i] == 'OD1' or df_in['Atom1'].iloc[i] == 'OD2')) or
            (df_in['Res1'].iloc[i][0] == 'E' and
             (df_in['Atom1'].iloc[i] == 'OE1' or df_in['Atom1'].iloc[i] == 'OE2'))) \
                and \
                ((df_in['Res2'].iloc[i][0] == 'K' and df_in['Atom2'].iloc[i] == 'NZ') or
                 (df_in['Res2'].iloc[i][0] == 'R' and
                  (df_in['Atom2'].iloc[i] == 'NH1' or df_in['Atom2'].iloc[i] == 'NH2' or df_in['Atom2'].iloc[i] == 'NE'))) \
                and \
                (df_in['Distance'].iloc[i] <= 3.5):
            saltBridgeList.append(df_in.iloc[i])

        # Salt bridge case2: res1 is a basic residue ('K' or 'R') and  Res2 is an acid reside ('D' or 'E')
        elif ((df_in['Res1'].iloc[i][0] == 'K' and df_in['Atom1'].iloc[i] == 'NZ') or
              (df_in['Res1'].iloc[i][0] == 'R' and
               (df_in['Atom1'].iloc[i] == 'NH1' or df_in['Atom1'].iloc[i] == 'NH2') or df_in['Atom2'].iloc[i] == 'NE')) \
                and \
                ((df_in['Res2'].iloc[i][0] == 'D' and
                  (df_in['Atom2'].iloc[i] == 'OD1' or df_in['Atom2'].iloc[i] == 'OD2')) or
                 (df_in['Res2'].iloc[i][0] == 'E' and
                  (df_in['Atom2'].iloc[i] == 'OE1' or df_in['Atom2'].iloc[i] == 'OE2'))) \
                and \
                (df_in['Distance'].iloc[i] <= 3.5):
            saltBridgeList.append(df_in.iloc[i])
    if not saltBridgeList:  # When saltBridgeList is empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(saltBridgeList)
        # col = ['Index', 'Source', 'Res1', 'Atom1', 'Type1', 'Target', 'Res2', 'Atom2', 'Type2', 'Distance']
        df_out.columns = col
        df_out.index = range(len(df_out))
    return df_out


def hbond(df_in):  # Detect hydrogen bonds (cutoff = 3.5 Å)
    hbondList = []
    for i in range(len(df_in)):
        if (df_in['Type1'].iloc[i] == 'O' or df_in['Type1'].iloc[i] == 'N' or df_in['Type1'].iloc[i] == 'S') \
                and (df_in['Type2'].iloc[i] == 'O' or df_in['Type2'].iloc[i] == 'N' or df_in['Type2'].iloc[i]
                     == 'S') and df_in['Distance'].iloc[i] <= 3.5:
            hbondList.append(df_in.iloc[i])
    if not hbondList:  # When hbondList is empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(hbondList)
        df_out.columns = col
        df_out.index = range(len(df_out))
    return df_out


def nonPolar(df_in):  # Detect non-polar interactions
    nonPolarList = []
    for i in range(len(df_in)):
        if df_in['Type1'].iloc[i] == 'C' and df_in['Type2'].iloc[i] == 'C':
            nonPolarList.append(df_in.iloc[i])
    if not nonPolarList:  # When saltBridgeList is not empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(nonPolarList)
    return df_out


if __name__ == '__main__':
    args = parseArguments()
    infile = args.i
    outDir = args.o
    abbr = args.a
    df = pd.read_excel(infile)
    col = ['Index', 'Source', 'Res1', 'Atom1', 'Type1', 'Target', 'Res2', 'Atom2', 'Type2', 'Distance']
    df.columns = col
    df_saltBridge = saltBridge(df)
    if isinstance(df_saltBridge, pd.DataFrame):
        df_saltBridge.to_excel(args.o + abbr + '_saltBridge.xlsx')
        df_noSaltBridge = df.drop(df[df.Index.isin(df_saltBridge.Index)].index)  # Remove salt bridges
    else:
        print('No salt bridges found')
        df_noSaltBridge = df
    df_hbond = hbond(df_noSaltBridge)
    if isinstance(df_hbond, pd.DataFrame):
        df_hbond.to_excel(args.o + abbr + '_hbond.xlsx')
        df_noHbond = df_noSaltBridge.drop(df_noSaltBridge[df_noSaltBridge.Index.isin(df_hbond.Index)].index)  # Remove hydrogen bonds
        df_noHbond.to_excel(args.o + abbr + '_vdw.xlsx')
    else:
        print('No hydrogen bond found')
    df_nonPolar = nonPolar(df_noHbond)
    if isinstance(df_nonPolar, pd.DataFrame):
        df_nonPolar.to_excel(args.o + abbr + '_nonPolar.xlsx')
    else:
        print('No non-polar contact found')




