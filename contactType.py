# This script uses the excel file generated by contact.py for contact atom pairs as the input, and produces three
# excel files for salt bridges, hydrogen bonds and non-polar contacts respectively.
# Usage: python contactType.py -i infile -o outDir -a abbr
# Options:
#   -i: Full path to the input pdb file, e.g., '/path/to/directory/input.xlsx'. The input excel file is an output
#       file of contact.py
#   -o: Full path to the output directory, e.g., '/path/to/directory/'
#   -a: abbreviation (a string) for the structure studied
# Usage example: python contactType.py -i test/input.xlsx -o test/ -a PT

import argparse
import pandas as pd
import numpy as np
import re
import contact


def parseArguments():
    # Create argument parser
    parser = argparse.ArgumentParser()

    # Positional mandatory arguments
    parser.add_argument("-i", help="Full path to the input excel file, '/path/to/directory/input.xlsx'", type=str)
    parser.add_argument("-o", help="directory, '/path/to/directory/'", type=str)
    parser.add_argument("-a", help="The abbreviation for the structure studies", type=str)

    # Parse arguments
    args = parser.parse_args()

    return args


def saltBridge(df_in):  # Detect salt bridges (cutoff = 3.5 Å)
    saltBridgeList = []
    for i in range(len(df_in)):
        # Salt bridge case1: Resn1 is an acid reside ('D' or 'E') and  Resn2 is a basic residue ('K' or 'R')
        if ((df_in['Resn1'].iloc[i][0] == 'D' and
             (df_in['Atom1'].iloc[i] == 'OD1' or df_in['Atom1'].iloc[i] == 'OD2')) or
            (df_in['Resn1'].iloc[i][0] == 'E' and
             (df_in['Atom1'].iloc[i] == 'OE1' or df_in['Atom1'].iloc[i] == 'OE2'))) \
                and \
                ((df_in['Resn2'].iloc[i][0] == 'K' and df_in['Atom2'].iloc[i] == 'NZ') or
                 (df_in['Resn2'].iloc[i][0] == 'R' and
                  (df_in['Atom2'].iloc[i] == 'NH1' or df_in['Atom2'].iloc[i] == 'NH2' or df_in['Atom2'].iloc[i] == 'NE'))) \
                and \
                (df_in['Distance'].iloc[i] <= 3.5):
            saltBridgeList.append(df_in.iloc[i])

        # Salt bridge case2: Resn1 is a basic residue ('K' or 'R') and  Resn2 is an acid reside ('D' or 'E')
        elif ((df_in['Resn1'].iloc[i][0] == 'K' and df_in['Atom1'].iloc[i] == 'NZ') or
              (df_in['Resn1'].iloc[i][0] == 'R' and
               (df_in['Atom1'].iloc[i] == 'NH1' or df_in['Atom1'].iloc[i] == 'NH2') or df_in['Atom2'].iloc[i] == 'NE')) \
                and \
                ((df_in['Resn2'].iloc[i][0] == 'D' and
                  (df_in['Atom2'].iloc[i] == 'OD1' or df_in['Atom2'].iloc[i] == 'OD2')) or
                 (df_in['Resn2'].iloc[i][0] == 'E' and
                  (df_in['Atom2'].iloc[i] == 'OE1' or df_in['Atom2'].iloc[i] == 'OE2'))) \
                and \
                (df_in['Distance'].iloc[i] <= 3.5):
            saltBridgeList.append(df_in.iloc[i])
    if not saltBridgeList:  # When saltBridgeList is empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(saltBridgeList)
        df_out.index = range(len(df_out))
    return df_out


def hBond(df_in):  # Detect hydrogen bonds (cutoff = 3.5 Å)
    hBondList = []
    for i in range(len(df_in)):
        if (df_in['Type1'].iloc[i] == 'O' or df_in['Type1'].iloc[i] == 'N' or df_in['Type1'].iloc[i] == 'S') \
                and (df_in['Type2'].iloc[i] == 'O' or df_in['Type2'].iloc[i] == 'N' or df_in['Type2'].iloc[i]
                     == 'S') and df_in['Distance'].iloc[i] <= 3.5:
            hBondList.append(df_in.iloc[i])
    if not hBondList:  # When hBondList is empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(hBondList)
        df_out.index = range(len(df_out))
    return df_out


def nonPolar(df_in):  # Detect non-polar interactions
    nonPolarList = []
    for i in range(len(df_in)):
        if df_in['Type1'].iloc[i] == 'C' and df_in['Type2'].iloc[i] == 'C':
            nonPolarList.append(df_in.iloc[i])
    if not nonPolarList:  # When saltBridgeList is not empty
        df_out = 'None'
    else:
        df_out = pd.DataFrame(nonPolarList)
    return df_out


if __name__ == '__main__':
    args = parseArguments()
    infile = args.i
    outDir = args.o
    abbr = args.a
    df = pd.read_excel(infile, header=0, index_col=[0])
    col = df.columns
    df_saltBridge = saltBridge(df)
    if isinstance(df_saltBridge, pd.DataFrame):
        df_saltBridge.columns = col
        df_saltBridge.to_excel(args.o + abbr + '_saltBridge.xlsx')
        # Remove salt bridges
        df_noSaltBridge = df.drop(df[df.Index.isin(df_saltBridge.Index)].index)
    else:
        print('No salt bridges found')
        df_noSaltBridge = df

    df_hBond = hBond(df_noSaltBridge)
    if isinstance(df_hBond, pd.DataFrame):
        df_hBond.columns = col
        df_hBond.to_excel(args.o + abbr + '_hBond.xlsx')
        # Remove hydrogen bonds
        df_nohBond = df_noSaltBridge.drop(df_noSaltBridge[df_noSaltBridge.Index.isin(df_hBond.Index)].index)
        df_nohBond.to_excel(args.o + abbr + '_vdw.xlsx')
    else:
        print('No hydrogen bond found')

    df_nonPolar = nonPolar(df_nohBond)
    if isinstance(df_nonPolar, pd.DataFrame):
        df_nonPolar.columns = col
        df_nonPolar.to_excel(args.o + abbr + '_nonPolar.xlsx')
    else:
        print('No non-polar contact found')




